import mongoose from 'mongoose';

import Introspector from '../../src/introspection/introspector';
import { Introspection, MongoDb } from '../../src/introspection/types';
import createDb from '../_mock';

const { Binary } = mongoose.mongo;

describe('Introspection > index', () => {
  let db: MongoDb;

  describe('introspect', () => {
    beforeAll(async () => {
      db = createDb({
        publisher: [
          {
            _id: 'pub1',
            name: 'Gnome Press',
            founded: 1948,
            defunct: 1962,
            mixed: true,
          },
          {
            _id: 'pub2',
            name: 'Hachette',
            founded: 1826,
            defunct: null,
            mixed: null,
          },
          {
            _id: 'pub2',
            name: 'Gallimard',
            founded: 1911,
            defunct: null,
            mixed: 'Hi!',
          },
        ],
        book: [
          {
            _id: 'bk1',
            title: 'Foundation',
            publisher: 'pub1',
            dateOfPublication: new Date('1951-01-01T00:00:00Z'),
            categories: ['sf', 'novel', 'top-sellers'],
            cover: new Binary(Buffer.from('cover1', 'utf-8')),
          },
        ],
      });
    });

    describe('invalid options', () => {
      it('should throw an error if collectionSampleSize < 1', async () => {
        await expect(Introspector.introspect(db, { collectionSampleSize: 0 })).rejects.toThrow(
          'collectionSampleSize must be at least 1',
        );
      });

      it('should throw an error if referenceSampleSize < 0', async () => {
        await expect(Introspector.introspect(db, { referenceSampleSize: -1 })).rejects.toThrow(
          'referenceSampleSize must be at least 0',
        );
      });

      it('should throw an error if maxPropertiesPerObject < 1', async () => {
        await expect(Introspector.introspect(db, { maxPropertiesPerObject: 0 })).rejects.toThrow(
          'maxPropertiesPerObject must be at least 1',
        );
      });
    });

    test('should work', async () => {
      const result = await Introspector.introspect(db);

      expect(result).toEqual({
        version: 1,
        source: '@forestadmin/datasource-mongo',
        models: [
          {
            name: 'book',
            analysis: {
              type: 'object',
              nullable: false,
              object: {
                _id: { type: 'string', nullable: false },
                dateOfPublication: { type: 'Date', nullable: false },
                publisher: { type: 'string', referenceTo: 'publisher', nullable: false },
                title: { type: 'string', nullable: false },
                categories: {
                  type: 'array',
                  nullable: false,
                  arrayElement: { type: 'string', nullable: false },
                },
                cover: { type: 'Binary', nullable: false },
              },
            },
          },
          {
            name: 'publisher',
            analysis: {
              type: 'object',
              nullable: false,
              object: {
                _id: { type: 'string', nullable: false },
                defunct: { type: 'number', nullable: true },
                founded: { type: 'number', nullable: false },
                name: { type: 'string', nullable: false },
                mixed: { type: 'Mixed', nullable: true },
              },
            },
          },
        ],
      });
    });
  });

  describe('assertIntrospectionInLatestFormat', () => {
    it('should not throw if the version and source are correct', () => {
      expect(() => {
        Introspector.assertIntrospectionInLatestFormat({
          source: '@forestadmin/datasource-mongo',
          version: 1,
        } as unknown as Introspection);
      }).not.toThrow();
    });

    it('should throw an error when the source is not the expected one', () => {
      expect(() => {
        Introspector.assertIntrospectionInLatestFormat({
          source: 'another-source',
        } as unknown as Introspection);
      }).toThrow(
        'This introspection has not been generated by the package @forestadmin/datasource-mongo.',
      );
    });

    it('should throw an error when the version is greater than the expected one', () => {
      expect(() => {
        Introspector.assertIntrospectionInLatestFormat({
          source: '@forestadmin/datasource-mongo',
          version: 2,
        } as unknown as Introspection);
      }).toThrow('Please update @forestadmin/datasource-mongo');
    });
  });
});
