import { NonPrimitiveTypes, PrimitiveTypes } from '../interfaces/schema';
import { Operator } from '../interfaces/query/selection';

const NO_TYPES_ALLOWED: Readonly<PrimitiveTypes[]> = [];

export const MAP_ALLOWED_TYPES_FOR_OPERATOR_IN_FILTER: Readonly<{
  [operator: string]: readonly (PrimitiveTypes | NonPrimitiveTypes)[];
}> = Object.freeze({
  [Operator.Present]: NO_TYPES_ALLOWED,
  [Operator.Blank]: NO_TYPES_ALLOWED,
  [Operator.In]: [
    NonPrimitiveTypes.ArrayOfNumber,
    NonPrimitiveTypes.ArrayOfString,
    NonPrimitiveTypes.ArrayOfBoolean,
    NonPrimitiveTypes.EmptyArray,
  ],
  [Operator.Equal]: [PrimitiveTypes.String, PrimitiveTypes.Number, PrimitiveTypes.Uuid],
  [Operator.Contains]: [PrimitiveTypes.String],
  [Operator.GreaterThan]: [PrimitiveTypes.Number],
  [Operator.EndsWith]: [],
  [Operator.IncludesAll]: [],
  [Operator.LessThan]: [],
  [Operator.NotContains]: [],
  [Operator.NotEqual]: [],
  [Operator.NotIn]: [],
  [Operator.StartsWith]: [],
  [Operator.AfterXHoursAgo]: [],
  [Operator.BeforeXHoursAgo]: [],
  [Operator.Future]: [],
  [Operator.Past]: [],
  [Operator.PreviousMonth]: [],
  [Operator.PreviousMonthToDate]: [],
  [Operator.PreviousQuarter]: [],
  [Operator.PreviousQuarterToDate]: [],
  [Operator.PreviousYear]: [],
  [Operator.PreviousYearToDate]: [],
  [Operator.PreviousWeek]: [],
  [Operator.PreviousWeekToDate]: [],
  [Operator.PreviousXDays]: [],
  [Operator.PreviousXDaysToDate]: [],
  [Operator.Today]: [],
  [Operator.Yesterday]: [],
  [Operator.LessThan]: [],
  [Operator.LongerThan]: [],
  [Operator.ShorterThan]: [],
  [Operator.Like]: [],
});

export const MAP_ALLOWED_OPERATORS_IN_FILTER_FOR_COLUMN_TYPE: Readonly<{
  [type: string]: readonly Operator[];
}> = Object.freeze({
  [PrimitiveTypes.String]: [Operator.Present, Operator.Equal, Operator.In],
  [PrimitiveTypes.Number]: [Operator.Present, Operator.Equal, Operator.GreaterThan, Operator.In],
  [PrimitiveTypes.Boolean]: [Operator.Equal, Operator.NotEqual, Operator.Blank],
  [PrimitiveTypes.Dateonly]: [
    Operator.Equal,
    Operator.NotEqual,
    Operator.Present,
    Operator.Blank,
    Operator.Today,
    Operator.Yesterday,
    Operator.PreviousXDaysToDate,
    Operator.PreviousWeek,
    Operator.PreviousWeekToDate,
    Operator.PreviousMonth,
    Operator.PreviousMonthToDate,
    Operator.PreviousQuarter,
    Operator.PreviousQuarterToDate,
    Operator.PreviousYear,
    Operator.PreviousYearToDate,
    Operator.Past,
    Operator.Future,
  ],
  [PrimitiveTypes.Date]: [
    Operator.Equal,
    Operator.NotEqual,
    Operator.Present,
    Operator.Blank,
    Operator.Today,
    Operator.Yesterday,
    Operator.PreviousXDaysToDate,
    Operator.PreviousWeek,
    Operator.PreviousWeekToDate,
    Operator.PreviousMonth,
    Operator.PreviousMonthToDate,
    Operator.PreviousQuarter,
    Operator.PreviousQuarterToDate,
    Operator.PreviousYear,
    Operator.PreviousYearToDate,
    Operator.Past,
    Operator.Future,
    Operator.BeforeXHoursAgo,
    Operator.AfterXHoursAgo,
  ],
  [PrimitiveTypes.Enum]: [Operator.Equal, Operator.In],
  [PrimitiveTypes.Json]: [],
  [PrimitiveTypes.Point]: [],
  [PrimitiveTypes.Timeonly]: [],
  [PrimitiveTypes.Uuid]: [Operator.Equal],
});

export const MAP_ALLOWED_TYPES_IN_FILTER_FOR_COLUMN_TYPE: Readonly<{
  [type: string]: readonly (PrimitiveTypes | NonPrimitiveTypes)[];
}> = Object.freeze({
  [PrimitiveTypes.String]: [PrimitiveTypes.String, NonPrimitiveTypes.ArrayOfString],
  [PrimitiveTypes.Number]: [PrimitiveTypes.Number, NonPrimitiveTypes.ArrayOfNumber],
  [PrimitiveTypes.Boolean]: [PrimitiveTypes.Boolean, NonPrimitiveTypes.ArrayOfBoolean],
  [PrimitiveTypes.Date]: [PrimitiveTypes.Date],
  [PrimitiveTypes.Dateonly]: [PrimitiveTypes.Dateonly],
  [PrimitiveTypes.Enum]: [PrimitiveTypes.String, NonPrimitiveTypes.ArrayOfString],
  [PrimitiveTypes.Json]: [PrimitiveTypes.Json],
  [PrimitiveTypes.Point]: [PrimitiveTypes.Point],
  [PrimitiveTypes.Timeonly]: [PrimitiveTypes.Timeonly],
  [PrimitiveTypes.Uuid]: [PrimitiveTypes.Uuid],
});
